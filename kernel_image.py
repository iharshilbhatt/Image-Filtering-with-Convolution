# -*- coding: utf-8 -*-
"""Kernel_image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uom8Ex5EnPXE4mGoX4eN4akke5HoSkUV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow # Import cv2_imshow from google.colab.patches
from PIL import Image, ImageFilter
from scipy.ndimage import convolve
import cv2

path = '/content/Main.jpg'

img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (300, 300)) #300x300px
# Show image using cv2_imshow
cv2_imshow(img)

#Define kernel

#Identity filter (no change to the image)
identity = np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]])
kernel = identity
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Horizontal edge detection
horizontal = np.array([[1, 0, -1], [0, 0, 0], [-1, 0, 1]])
kernel = horizontal
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Vertical edge detection
vertical = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])
kernel = vertical
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Sharpening filter
sharpening = np.array([[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]])
kernel = sharpening
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Emboss filter
emboss = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
kernel = emboss
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Small blur (average) filter
small_blur = np.ones((7, 7), dtype=float) * (1/49)
kernel = small_blur
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Large blur (average) filter
large_blur = np.ones((20, 20), dtype=float) * (1/400)
kernel = large_blur
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Box blur (average blur) filter
box_blur = np.ones((3, 3), dtype=float) * (1/9)
kernel = box_blur
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Gaussian blur filter
gaussian_blur = np.array([[1, 2, 1], [2, 4, 2], [1, 2, 1]], dtype=float) * (1/16)
kernel = gaussian_blur
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)

# Edge enhancement filter
edge_enhance = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
kernel = edge_enhance
im = np.array(img, dtype=float)
im_convol = convolve(im, kernel)
im_out = np.array(np.clip(im_convol, 0, 255))
cv2_imshow(im_out)